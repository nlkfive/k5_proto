syntax = "proto3";

package protobuf;
option  go_package = "./;protobufpb";

message AuthenticateReq {
    string token = 1; 
}

message GetUserReq {
    string publicAddress = 1;
}

message FcmNotification {
    string title = 1;
    string body = 2;
    string image = 3;
}

message FcmReq {
    optional string txHash = 1;
    string publicAddress = 2;
    map<string, string> data = 3;
    FcmNotification notification = 4;
}

message UserRes {
    string publicAddress = 1;
    optional string name = 2;
    optional string avatar = 3;
    optional string bio = 4;
    optional string personalSite = 5;
    optional string twitterUsername = 6;
    optional string email = 7;
    optional string phoneNumber = 8;
    optional bool isAdmin = 9;
}

message FcmRes {
    uint32 opcode = 1;
    string message = 2;
}


message MintNftReq {
    string tokenAddress = 1;
    string toAddress    = 2;
    string tokenId      = 3;
    string gtokenURI    = 4;
}

message TxnRes {
    string txHash = 1;
}

message BurnNftReq {
    string tokenAddress = 1;
    string tokenId      = 2;
}

message CreateTournamentReq {
    string tournamentType = 1;
    uint32 noRace         = 2;
    string nlggtAddr      = 3;
    string raceReward     = 4;
    string tournamentName = 5;
}

message CreateTournamentRes {
    string tournamentAddress = 1;
    string txnHash           = 2;
}

message CreateRaceReq {
    string tournamentAddress = 1;
    uint32 noSlot            = 2;
    uint32 startAt           = 3;
}

message GrantRewardReq {
    string tournamentAddress = 1;
    uint32 winnerIndex       = 2;
    string winner            = 3;
    string nftRewardId       = 4; 
    string tokenURI          = 5;
}

message UpdateRaceResultReq {
    string tournamentAddress = 1;
    string raceId            = 2;
    string result            = 3;
}

message CancelRaceReq {
    string tournamentAddress = 1;
    string raceId            = 2;
}

message TransferNftReq {
    string tokenAddress = 1;
    string toAddress    = 2;
    string tokenId      = 3;
}

message TransferTokenReq {
    string tokenAddress = 1;
    string toAddress    = 2;
    int32  amount       = 3;
}

message GrantRoleReq {
    string address = 1;
    string role    = 2;
    string account = 3;
}

service UserSvc {
    rpc Authenticate(AuthenticateReq) returns (UserRes);
    rpc GetUser(GetUserReq) returns (UserRes);
    rpc FcmNotify(FcmReq) returns (FcmRes);
    rpc AdminMintNft(MintNftReq) returns (TxnRes);
    rpc AdminBurnNft(BurnNftReq) returns (TxnRes);
    rpc AdminCreateTournament(CreateTournamentReq) returns (CreateTournamentRes);
    rpc AdminCreateRace(CreateRaceReq) returns (TxnRes);
    rpc AdminGrantReward(GrantRewardReq) returns (TxnRes);
    rpc AdminUpdateRaceResult(UpdateRaceResultReq) returns (TxnRes);
    rpc AdminCancelRace(CancelRaceReq) returns (TxnRes);
    rpc AdminTransferNft(TransferNftReq) returns (TxnRes);
    rpc AdminTransferToken(TransferTokenReq) returns (TxnRes);
    rpc AdminGrantRole(GrantRoleReq) returns (TxnRes);
}
