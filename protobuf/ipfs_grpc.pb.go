// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: k5_proto/proto/ipfs.proto

package protobufpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IpfsSvcClient is the client API for IpfsSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IpfsSvcClient interface {
	PublishNFTDataViaIPFS(ctx context.Context, in *PublishNFTDataViaIPFSReq, opts ...grpc.CallOption) (*PublishToIPFSRes, error)
	PublishFileToIPFS(ctx context.Context, in *PublishFileToIPFSReq, opts ...grpc.CallOption) (*PublishToIPFSRes, error)
}

type ipfsSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewIpfsSvcClient(cc grpc.ClientConnInterface) IpfsSvcClient {
	return &ipfsSvcClient{cc}
}

func (c *ipfsSvcClient) PublishNFTDataViaIPFS(ctx context.Context, in *PublishNFTDataViaIPFSReq, opts ...grpc.CallOption) (*PublishToIPFSRes, error) {
	out := new(PublishToIPFSRes)
	err := c.cc.Invoke(ctx, "/protobuf.IpfsSvc/PublishNFTDataViaIPFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ipfsSvcClient) PublishFileToIPFS(ctx context.Context, in *PublishFileToIPFSReq, opts ...grpc.CallOption) (*PublishToIPFSRes, error) {
	out := new(PublishToIPFSRes)
	err := c.cc.Invoke(ctx, "/protobuf.IpfsSvc/PublishFileToIPFS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IpfsSvcServer is the server API for IpfsSvc service.
// All implementations must embed UnimplementedIpfsSvcServer
// for forward compatibility
type IpfsSvcServer interface {
	PublishNFTDataViaIPFS(context.Context, *PublishNFTDataViaIPFSReq) (*PublishToIPFSRes, error)
	PublishFileToIPFS(context.Context, *PublishFileToIPFSReq) (*PublishToIPFSRes, error)
	mustEmbedUnimplementedIpfsSvcServer()
}

// UnimplementedIpfsSvcServer must be embedded to have forward compatible implementations.
type UnimplementedIpfsSvcServer struct {
}

func (UnimplementedIpfsSvcServer) PublishNFTDataViaIPFS(context.Context, *PublishNFTDataViaIPFSReq) (*PublishToIPFSRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishNFTDataViaIPFS not implemented")
}
func (UnimplementedIpfsSvcServer) PublishFileToIPFS(context.Context, *PublishFileToIPFSReq) (*PublishToIPFSRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishFileToIPFS not implemented")
}
func (UnimplementedIpfsSvcServer) mustEmbedUnimplementedIpfsSvcServer() {}

// UnsafeIpfsSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IpfsSvcServer will
// result in compilation errors.
type UnsafeIpfsSvcServer interface {
	mustEmbedUnimplementedIpfsSvcServer()
}

func RegisterIpfsSvcServer(s grpc.ServiceRegistrar, srv IpfsSvcServer) {
	s.RegisterService(&IpfsSvc_ServiceDesc, srv)
}

func _IpfsSvc_PublishNFTDataViaIPFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishNFTDataViaIPFSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpfsSvcServer).PublishNFTDataViaIPFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.IpfsSvc/PublishNFTDataViaIPFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpfsSvcServer).PublishNFTDataViaIPFS(ctx, req.(*PublishNFTDataViaIPFSReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IpfsSvc_PublishFileToIPFS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishFileToIPFSReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IpfsSvcServer).PublishFileToIPFS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.IpfsSvc/PublishFileToIPFS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IpfsSvcServer).PublishFileToIPFS(ctx, req.(*PublishFileToIPFSReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IpfsSvc_ServiceDesc is the grpc.ServiceDesc for IpfsSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IpfsSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.IpfsSvc",
	HandlerType: (*IpfsSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishNFTDataViaIPFS",
			Handler:    _IpfsSvc_PublishNFTDataViaIPFS_Handler,
		},
		{
			MethodName: "PublishFileToIPFS",
			Handler:    _IpfsSvc_PublishFileToIPFS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k5_proto/proto/ipfs.proto",
}
