// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: k5_proto/proto/mkp.proto

package protobufpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MkpSvcClient is the client API for MkpSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MkpSvcClient interface {
	// fungible token
	TransferErc20(ctx context.Context, in *TransferErc20Req, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// non fungible token
	HandleMintErc721(ctx context.Context, in *HandleMintErc721Req, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HandleTransferErc721(ctx context.Context, in *HandleTransferErc721Req, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckNftExists(ctx context.Context, in *CheckNftExistsReq, opts ...grpc.CallOption) (*CheckNftExistsRes, error)
	// public auction
	PublicAuctionCreated(ctx context.Context, in *AuctionCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublicAuctionBid(ctx context.Context, in *AuctionBidReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublicAuctionRefund(ctx context.Context, in *AuctionRefundReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublicAuctionCancelled(ctx context.Context, in *AuctionCancelledReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	PublicAuctionGrantReward(ctx context.Context, in *AuctionGrantRewardReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// blind auction
	BlindAuctionCreated(ctx context.Context, in *AuctionCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlindAuctionBid(ctx context.Context, in *AuctionBidReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlindAuctionReveal(ctx context.Context, in *BlindAuctionRevealReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlindAuctionRefund(ctx context.Context, in *AuctionRefundReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlindAuctionCancelled(ctx context.Context, in *AuctionCancelledReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	BlindAuctionGrantReward(ctx context.Context, in *AuctionGrantRewardReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Trading
	CreateTrading(ctx context.Context, in *CreateTradingReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateTrading(ctx context.Context, in *UpdateTradingReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelTrading(ctx context.Context, in *CancelTradingReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type mkpSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMkpSvcClient(cc grpc.ClientConnInterface) MkpSvcClient {
	return &mkpSvcClient{cc}
}

func (c *mkpSvcClient) TransferErc20(ctx context.Context, in *TransferErc20Req, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/TransferErc20", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) HandleMintErc721(ctx context.Context, in *HandleMintErc721Req, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/HandleMintErc721", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) HandleTransferErc721(ctx context.Context, in *HandleTransferErc721Req, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/HandleTransferErc721", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) CheckNftExists(ctx context.Context, in *CheckNftExistsReq, opts ...grpc.CallOption) (*CheckNftExistsRes, error) {
	out := new(CheckNftExistsRes)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/CheckNftExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) PublicAuctionCreated(ctx context.Context, in *AuctionCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/PublicAuctionCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) PublicAuctionBid(ctx context.Context, in *AuctionBidReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/PublicAuctionBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) PublicAuctionRefund(ctx context.Context, in *AuctionRefundReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/PublicAuctionRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) PublicAuctionCancelled(ctx context.Context, in *AuctionCancelledReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/PublicAuctionCancelled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) PublicAuctionGrantReward(ctx context.Context, in *AuctionGrantRewardReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/PublicAuctionGrantReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) BlindAuctionCreated(ctx context.Context, in *AuctionCreateReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/BlindAuctionCreated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) BlindAuctionBid(ctx context.Context, in *AuctionBidReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/BlindAuctionBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) BlindAuctionReveal(ctx context.Context, in *BlindAuctionRevealReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/BlindAuctionReveal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) BlindAuctionRefund(ctx context.Context, in *AuctionRefundReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/BlindAuctionRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) BlindAuctionCancelled(ctx context.Context, in *AuctionCancelledReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/BlindAuctionCancelled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) BlindAuctionGrantReward(ctx context.Context, in *AuctionGrantRewardReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/BlindAuctionGrantReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) CreateTrading(ctx context.Context, in *CreateTradingReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/CreateTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) UpdateTrading(ctx context.Context, in *UpdateTradingReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/UpdateTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mkpSvcClient) CancelTrading(ctx context.Context, in *CancelTradingReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.MkpSvc/CancelTrading", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MkpSvcServer is the server API for MkpSvc service.
// All implementations must embed UnimplementedMkpSvcServer
// for forward compatibility
type MkpSvcServer interface {
	// fungible token
	TransferErc20(context.Context, *TransferErc20Req) (*emptypb.Empty, error)
	// non fungible token
	HandleMintErc721(context.Context, *HandleMintErc721Req) (*emptypb.Empty, error)
	HandleTransferErc721(context.Context, *HandleTransferErc721Req) (*emptypb.Empty, error)
	CheckNftExists(context.Context, *CheckNftExistsReq) (*CheckNftExistsRes, error)
	// public auction
	PublicAuctionCreated(context.Context, *AuctionCreateReq) (*emptypb.Empty, error)
	PublicAuctionBid(context.Context, *AuctionBidReq) (*emptypb.Empty, error)
	PublicAuctionRefund(context.Context, *AuctionRefundReq) (*emptypb.Empty, error)
	PublicAuctionCancelled(context.Context, *AuctionCancelledReq) (*emptypb.Empty, error)
	PublicAuctionGrantReward(context.Context, *AuctionGrantRewardReq) (*emptypb.Empty, error)
	// blind auction
	BlindAuctionCreated(context.Context, *AuctionCreateReq) (*emptypb.Empty, error)
	BlindAuctionBid(context.Context, *AuctionBidReq) (*emptypb.Empty, error)
	BlindAuctionReveal(context.Context, *BlindAuctionRevealReq) (*emptypb.Empty, error)
	BlindAuctionRefund(context.Context, *AuctionRefundReq) (*emptypb.Empty, error)
	BlindAuctionCancelled(context.Context, *AuctionCancelledReq) (*emptypb.Empty, error)
	BlindAuctionGrantReward(context.Context, *AuctionGrantRewardReq) (*emptypb.Empty, error)
	// Trading
	CreateTrading(context.Context, *CreateTradingReq) (*emptypb.Empty, error)
	UpdateTrading(context.Context, *UpdateTradingReq) (*emptypb.Empty, error)
	CancelTrading(context.Context, *CancelTradingReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedMkpSvcServer()
}

// UnimplementedMkpSvcServer must be embedded to have forward compatible implementations.
type UnimplementedMkpSvcServer struct {
}

func (UnimplementedMkpSvcServer) TransferErc20(context.Context, *TransferErc20Req) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferErc20 not implemented")
}
func (UnimplementedMkpSvcServer) HandleMintErc721(context.Context, *HandleMintErc721Req) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleMintErc721 not implemented")
}
func (UnimplementedMkpSvcServer) HandleTransferErc721(context.Context, *HandleTransferErc721Req) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTransferErc721 not implemented")
}
func (UnimplementedMkpSvcServer) CheckNftExists(context.Context, *CheckNftExistsReq) (*CheckNftExistsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckNftExists not implemented")
}
func (UnimplementedMkpSvcServer) PublicAuctionCreated(context.Context, *AuctionCreateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicAuctionCreated not implemented")
}
func (UnimplementedMkpSvcServer) PublicAuctionBid(context.Context, *AuctionBidReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicAuctionBid not implemented")
}
func (UnimplementedMkpSvcServer) PublicAuctionRefund(context.Context, *AuctionRefundReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicAuctionRefund not implemented")
}
func (UnimplementedMkpSvcServer) PublicAuctionCancelled(context.Context, *AuctionCancelledReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicAuctionCancelled not implemented")
}
func (UnimplementedMkpSvcServer) PublicAuctionGrantReward(context.Context, *AuctionGrantRewardReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicAuctionGrantReward not implemented")
}
func (UnimplementedMkpSvcServer) BlindAuctionCreated(context.Context, *AuctionCreateReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindAuctionCreated not implemented")
}
func (UnimplementedMkpSvcServer) BlindAuctionBid(context.Context, *AuctionBidReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindAuctionBid not implemented")
}
func (UnimplementedMkpSvcServer) BlindAuctionReveal(context.Context, *BlindAuctionRevealReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindAuctionReveal not implemented")
}
func (UnimplementedMkpSvcServer) BlindAuctionRefund(context.Context, *AuctionRefundReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindAuctionRefund not implemented")
}
func (UnimplementedMkpSvcServer) BlindAuctionCancelled(context.Context, *AuctionCancelledReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindAuctionCancelled not implemented")
}
func (UnimplementedMkpSvcServer) BlindAuctionGrantReward(context.Context, *AuctionGrantRewardReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlindAuctionGrantReward not implemented")
}
func (UnimplementedMkpSvcServer) CreateTrading(context.Context, *CreateTradingReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrading not implemented")
}
func (UnimplementedMkpSvcServer) UpdateTrading(context.Context, *UpdateTradingReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTrading not implemented")
}
func (UnimplementedMkpSvcServer) CancelTrading(context.Context, *CancelTradingReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelTrading not implemented")
}
func (UnimplementedMkpSvcServer) mustEmbedUnimplementedMkpSvcServer() {}

// UnsafeMkpSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MkpSvcServer will
// result in compilation errors.
type UnsafeMkpSvcServer interface {
	mustEmbedUnimplementedMkpSvcServer()
}

func RegisterMkpSvcServer(s grpc.ServiceRegistrar, srv MkpSvcServer) {
	s.RegisterService(&MkpSvc_ServiceDesc, srv)
}

func _MkpSvc_TransferErc20_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferErc20Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).TransferErc20(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/TransferErc20",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).TransferErc20(ctx, req.(*TransferErc20Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_HandleMintErc721_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleMintErc721Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).HandleMintErc721(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/HandleMintErc721",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).HandleMintErc721(ctx, req.(*HandleMintErc721Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_HandleTransferErc721_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleTransferErc721Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).HandleTransferErc721(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/HandleTransferErc721",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).HandleTransferErc721(ctx, req.(*HandleTransferErc721Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_CheckNftExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNftExistsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).CheckNftExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/CheckNftExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).CheckNftExists(ctx, req.(*CheckNftExistsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_PublicAuctionCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).PublicAuctionCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/PublicAuctionCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).PublicAuctionCreated(ctx, req.(*AuctionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_PublicAuctionBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionBidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).PublicAuctionBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/PublicAuctionBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).PublicAuctionBid(ctx, req.(*AuctionBidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_PublicAuctionRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).PublicAuctionRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/PublicAuctionRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).PublicAuctionRefund(ctx, req.(*AuctionRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_PublicAuctionCancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionCancelledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).PublicAuctionCancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/PublicAuctionCancelled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).PublicAuctionCancelled(ctx, req.(*AuctionCancelledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_PublicAuctionGrantReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionGrantRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).PublicAuctionGrantReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/PublicAuctionGrantReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).PublicAuctionGrantReward(ctx, req.(*AuctionGrantRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_BlindAuctionCreated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).BlindAuctionCreated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/BlindAuctionCreated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).BlindAuctionCreated(ctx, req.(*AuctionCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_BlindAuctionBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionBidReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).BlindAuctionBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/BlindAuctionBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).BlindAuctionBid(ctx, req.(*AuctionBidReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_BlindAuctionReveal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlindAuctionRevealReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).BlindAuctionReveal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/BlindAuctionReveal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).BlindAuctionReveal(ctx, req.(*BlindAuctionRevealReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_BlindAuctionRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionRefundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).BlindAuctionRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/BlindAuctionRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).BlindAuctionRefund(ctx, req.(*AuctionRefundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_BlindAuctionCancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionCancelledReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).BlindAuctionCancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/BlindAuctionCancelled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).BlindAuctionCancelled(ctx, req.(*AuctionCancelledReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_BlindAuctionGrantReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuctionGrantRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).BlindAuctionGrantReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/BlindAuctionGrantReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).BlindAuctionGrantReward(ctx, req.(*AuctionGrantRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_CreateTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTradingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).CreateTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/CreateTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).CreateTrading(ctx, req.(*CreateTradingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_UpdateTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTradingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).UpdateTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/UpdateTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).UpdateTrading(ctx, req.(*UpdateTradingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MkpSvc_CancelTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelTradingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MkpSvcServer).CancelTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MkpSvc/CancelTrading",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MkpSvcServer).CancelTrading(ctx, req.(*CancelTradingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MkpSvc_ServiceDesc is the grpc.ServiceDesc for MkpSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MkpSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MkpSvc",
	HandlerType: (*MkpSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferErc20",
			Handler:    _MkpSvc_TransferErc20_Handler,
		},
		{
			MethodName: "HandleMintErc721",
			Handler:    _MkpSvc_HandleMintErc721_Handler,
		},
		{
			MethodName: "HandleTransferErc721",
			Handler:    _MkpSvc_HandleTransferErc721_Handler,
		},
		{
			MethodName: "CheckNftExists",
			Handler:    _MkpSvc_CheckNftExists_Handler,
		},
		{
			MethodName: "PublicAuctionCreated",
			Handler:    _MkpSvc_PublicAuctionCreated_Handler,
		},
		{
			MethodName: "PublicAuctionBid",
			Handler:    _MkpSvc_PublicAuctionBid_Handler,
		},
		{
			MethodName: "PublicAuctionRefund",
			Handler:    _MkpSvc_PublicAuctionRefund_Handler,
		},
		{
			MethodName: "PublicAuctionCancelled",
			Handler:    _MkpSvc_PublicAuctionCancelled_Handler,
		},
		{
			MethodName: "PublicAuctionGrantReward",
			Handler:    _MkpSvc_PublicAuctionGrantReward_Handler,
		},
		{
			MethodName: "BlindAuctionCreated",
			Handler:    _MkpSvc_BlindAuctionCreated_Handler,
		},
		{
			MethodName: "BlindAuctionBid",
			Handler:    _MkpSvc_BlindAuctionBid_Handler,
		},
		{
			MethodName: "BlindAuctionReveal",
			Handler:    _MkpSvc_BlindAuctionReveal_Handler,
		},
		{
			MethodName: "BlindAuctionRefund",
			Handler:    _MkpSvc_BlindAuctionRefund_Handler,
		},
		{
			MethodName: "BlindAuctionCancelled",
			Handler:    _MkpSvc_BlindAuctionCancelled_Handler,
		},
		{
			MethodName: "BlindAuctionGrantReward",
			Handler:    _MkpSvc_BlindAuctionGrantReward_Handler,
		},
		{
			MethodName: "CreateTrading",
			Handler:    _MkpSvc_CreateTrading_Handler,
		},
		{
			MethodName: "UpdateTrading",
			Handler:    _MkpSvc_UpdateTrading_Handler,
		},
		{
			MethodName: "CancelTrading",
			Handler:    _MkpSvc_CancelTrading_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k5_proto/proto/mkp.proto",
}
