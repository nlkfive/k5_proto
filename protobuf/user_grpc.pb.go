// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: k5_proto/proto/user.proto

package protobufpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserSvcClient is the client API for UserSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserSvcClient interface {
	Authenticate(ctx context.Context, in *AuthenticateReq, opts ...grpc.CallOption) (*UserRes, error)
	GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*UserRes, error)
	FcmNotify(ctx context.Context, in *FcmReq, opts ...grpc.CallOption) (*FcmRes, error)
	AdminMintNft(ctx context.Context, in *MintNftReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminBurnNft(ctx context.Context, in *BurnNftReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminCreateTournament(ctx context.Context, in *CreateTournamentReq, opts ...grpc.CallOption) (*CreateTournamentRes, error)
	AdminCreateRace(ctx context.Context, in *CreateRaceReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminGrantReward(ctx context.Context, in *GrantRewardReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminUpdateRaceResult(ctx context.Context, in *UpdateRaceResultReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminCancelRace(ctx context.Context, in *CancelRaceReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminTransferNft(ctx context.Context, in *TransferNftReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminTransferToken(ctx context.Context, in *TransferTokenReq, opts ...grpc.CallOption) (*TxnRes, error)
	AdminGrantRole(ctx context.Context, in *GrantRoleReq, opts ...grpc.CallOption) (*TxnRes, error)
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSvcClient(cc grpc.ClientConnInterface) UserSvcClient {
	return &userSvcClient{cc}
}

func (c *userSvcClient) Authenticate(ctx context.Context, in *AuthenticateReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) GetUser(ctx context.Context, in *GetUserReq, opts ...grpc.CallOption) (*UserRes, error) {
	out := new(UserRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) FcmNotify(ctx context.Context, in *FcmReq, opts ...grpc.CallOption) (*FcmRes, error) {
	out := new(FcmRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/FcmNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminMintNft(ctx context.Context, in *MintNftReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminMintNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminBurnNft(ctx context.Context, in *BurnNftReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminBurnNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminCreateTournament(ctx context.Context, in *CreateTournamentReq, opts ...grpc.CallOption) (*CreateTournamentRes, error) {
	out := new(CreateTournamentRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminCreateTournament", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminCreateRace(ctx context.Context, in *CreateRaceReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminCreateRace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminGrantReward(ctx context.Context, in *GrantRewardReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminGrantReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminUpdateRaceResult(ctx context.Context, in *UpdateRaceResultReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminUpdateRaceResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminCancelRace(ctx context.Context, in *CancelRaceReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminCancelRace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminTransferNft(ctx context.Context, in *TransferNftReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminTransferNft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminTransferToken(ctx context.Context, in *TransferTokenReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminTransferToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) AdminGrantRole(ctx context.Context, in *GrantRoleReq, opts ...grpc.CallOption) (*TxnRes, error) {
	out := new(TxnRes)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/AdminGrantRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userSvcClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/protobuf.UserSvc/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSvcServer is the server API for UserSvc service.
// All implementations must embed UnimplementedUserSvcServer
// for forward compatibility
type UserSvcServer interface {
	Authenticate(context.Context, *AuthenticateReq) (*UserRes, error)
	GetUser(context.Context, *GetUserReq) (*UserRes, error)
	FcmNotify(context.Context, *FcmReq) (*FcmRes, error)
	AdminMintNft(context.Context, *MintNftReq) (*TxnRes, error)
	AdminBurnNft(context.Context, *BurnNftReq) (*TxnRes, error)
	AdminCreateTournament(context.Context, *CreateTournamentReq) (*CreateTournamentRes, error)
	AdminCreateRace(context.Context, *CreateRaceReq) (*TxnRes, error)
	AdminGrantReward(context.Context, *GrantRewardReq) (*TxnRes, error)
	AdminUpdateRaceResult(context.Context, *UpdateRaceResultReq) (*TxnRes, error)
	AdminCancelRace(context.Context, *CancelRaceReq) (*TxnRes, error)
	AdminTransferNft(context.Context, *TransferNftReq) (*TxnRes, error)
	AdminTransferToken(context.Context, *TransferTokenReq) (*TxnRes, error)
	AdminGrantRole(context.Context, *GrantRoleReq) (*TxnRes, error)
	CreateUser(context.Context, *CreateUserReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserSvcServer()
}

// UnimplementedUserSvcServer must be embedded to have forward compatible implementations.
type UnimplementedUserSvcServer struct {
}

func (UnimplementedUserSvcServer) Authenticate(context.Context, *AuthenticateReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedUserSvcServer) GetUser(context.Context, *GetUserReq) (*UserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserSvcServer) FcmNotify(context.Context, *FcmReq) (*FcmRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FcmNotify not implemented")
}
func (UnimplementedUserSvcServer) AdminMintNft(context.Context, *MintNftReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminMintNft not implemented")
}
func (UnimplementedUserSvcServer) AdminBurnNft(context.Context, *BurnNftReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminBurnNft not implemented")
}
func (UnimplementedUserSvcServer) AdminCreateTournament(context.Context, *CreateTournamentReq) (*CreateTournamentRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateTournament not implemented")
}
func (UnimplementedUserSvcServer) AdminCreateRace(context.Context, *CreateRaceReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCreateRace not implemented")
}
func (UnimplementedUserSvcServer) AdminGrantReward(context.Context, *GrantRewardReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGrantReward not implemented")
}
func (UnimplementedUserSvcServer) AdminUpdateRaceResult(context.Context, *UpdateRaceResultReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminUpdateRaceResult not implemented")
}
func (UnimplementedUserSvcServer) AdminCancelRace(context.Context, *CancelRaceReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminCancelRace not implemented")
}
func (UnimplementedUserSvcServer) AdminTransferNft(context.Context, *TransferNftReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTransferNft not implemented")
}
func (UnimplementedUserSvcServer) AdminTransferToken(context.Context, *TransferTokenReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminTransferToken not implemented")
}
func (UnimplementedUserSvcServer) AdminGrantRole(context.Context, *GrantRoleReq) (*TxnRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminGrantRole not implemented")
}
func (UnimplementedUserSvcServer) CreateUser(context.Context, *CreateUserReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserSvcServer) mustEmbedUnimplementedUserSvcServer() {}

// UnsafeUserSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserSvcServer will
// result in compilation errors.
type UnsafeUserSvcServer interface {
	mustEmbedUnimplementedUserSvcServer()
}

func RegisterUserSvcServer(s grpc.ServiceRegistrar, srv UserSvcServer) {
	s.RegisterService(&UserSvc_ServiceDesc, srv)
}

func _UserSvc_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).Authenticate(ctx, req.(*AuthenticateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).GetUser(ctx, req.(*GetUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_FcmNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FcmReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).FcmNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/FcmNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).FcmNotify(ctx, req.(*FcmReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminMintNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MintNftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminMintNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminMintNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminMintNft(ctx, req.(*MintNftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminBurnNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BurnNftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminBurnNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminBurnNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminBurnNft(ctx, req.(*BurnNftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminCreateTournament_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTournamentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminCreateTournament(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminCreateTournament",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminCreateTournament(ctx, req.(*CreateTournamentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminCreateRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminCreateRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminCreateRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminCreateRace(ctx, req.(*CreateRaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminGrantReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRewardReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminGrantReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminGrantReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminGrantReward(ctx, req.(*GrantRewardReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminUpdateRaceResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRaceResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminUpdateRaceResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminUpdateRaceResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminUpdateRaceResult(ctx, req.(*UpdateRaceResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminCancelRace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRaceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminCancelRace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminCancelRace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminCancelRace(ctx, req.(*CancelRaceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminTransferNft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferNftReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminTransferNft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminTransferNft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminTransferNft(ctx, req.(*TransferNftReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminTransferToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminTransferToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminTransferToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminTransferToken(ctx, req.(*TransferTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_AdminGrantRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRoleReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).AdminGrantRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/AdminGrantRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).AdminGrantRole(ctx, req.(*GrantRoleReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserSvc_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSvcServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.UserSvc/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSvcServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserSvc_ServiceDesc is the grpc.ServiceDesc for UserSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.UserSvc",
	HandlerType: (*UserSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _UserSvc_Authenticate_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UserSvc_GetUser_Handler,
		},
		{
			MethodName: "FcmNotify",
			Handler:    _UserSvc_FcmNotify_Handler,
		},
		{
			MethodName: "AdminMintNft",
			Handler:    _UserSvc_AdminMintNft_Handler,
		},
		{
			MethodName: "AdminBurnNft",
			Handler:    _UserSvc_AdminBurnNft_Handler,
		},
		{
			MethodName: "AdminCreateTournament",
			Handler:    _UserSvc_AdminCreateTournament_Handler,
		},
		{
			MethodName: "AdminCreateRace",
			Handler:    _UserSvc_AdminCreateRace_Handler,
		},
		{
			MethodName: "AdminGrantReward",
			Handler:    _UserSvc_AdminGrantReward_Handler,
		},
		{
			MethodName: "AdminUpdateRaceResult",
			Handler:    _UserSvc_AdminUpdateRaceResult_Handler,
		},
		{
			MethodName: "AdminCancelRace",
			Handler:    _UserSvc_AdminCancelRace_Handler,
		},
		{
			MethodName: "AdminTransferNft",
			Handler:    _UserSvc_AdminTransferNft_Handler,
		},
		{
			MethodName: "AdminTransferToken",
			Handler:    _UserSvc_AdminTransferToken_Handler,
		},
		{
			MethodName: "AdminGrantRole",
			Handler:    _UserSvc_AdminGrantRole_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _UserSvc_CreateUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k5_proto/proto/user.proto",
}
